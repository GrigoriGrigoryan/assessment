import {splitInput} from "../../src/func";

describe('Checking number conversion to word (words)', () => {
    test('Under 100', () => {
        expect(splitInput(0)).toBe("zero")
        expect(splitInput(8)).toBe("eight")
        expect(splitInput(12)).toBe("twelve")
        expect(splitInput(20)).toBe("twenty")
        expect(splitInput(34)).toBe("thirty-four")
        expect(splitInput(40)).toBe("forty")
        expect(splitInput(55)).toBe("fifty-five")
        expect(splitInput(69)).toBe("sixty-nine")
        expect(splitInput(73)).toBe("seventy-three")
        expect(splitInput(99)).toBe("ninety-nine")
    })

    test('Under 1000', () => {
        expect(splitInput(100)).toBe("hundred")
        expect(splitInput(201)).toBe("two hundred and one")
        expect(splitInput(322)).toBe("three hundred and twenty-two")
        expect(splitInput(402)).toBe("four hundred and two")
        expect(splitInput(500)).toBe("five hundred")
        expect(splitInput(666)).toBe("six hundred and sixty-six")
        expect(splitInput(730)).toBe("seven hundred and thirty")
        expect(splitInput(812)).toBe("eight hundred and twelve")
        expect(splitInput(909)).toBe("nine hundred and nine")
        expect(splitInput(999)).toBe("nine hundred and ninety-nine")
    })

    test('Under 100_000', () => {
        expect(splitInput(2301)).toBe("two thousand three hundred and one")
        expect(splitInput(8000)).toBe("eight thousand")
        expect(splitInput(9999)).toBe("nine thousand nine hundred and ninety-nine")
        expect(splitInput(13001)).toBe("thirteen thousand and one")
        expect(splitInput(20000)).toBe("twenty thousand")
        expect(splitInput(58455)).toBe("fifty-eight thousand four hundred and fifty-five")
        expect(splitInput(70002)).toBe("seventy thousand and two")
        expect(splitInput(80100)).toBe("eighty thousand hundred")
        expect(splitInput(99000)).toBe("ninety-nine thousand")
        expect(splitInput(99999)).toBe("ninety-nine thousand nine hundred and ninety-nine")
    })

    test('Under 1_000_000 - Million', () => {
        expect(splitInput(100_000)).toBe("hundred thousand")
        expect(splitInput(100_001)).toBe("hundred thousand and one")
        expect(splitInput(300_300)).toBe("three hundred thousand three hundred")
        expect(splitInput(404_000)).toBe("four hundred and four thousand")
        expect(splitInput(550_000)).toBe("five hundred and fifty thousand")
        expect(splitInput(600_060)).toBe("six hundred thousand and sixty")
        expect(splitInput(770_007)).toBe("seven hundred and seventy thousand and seven")
        expect(splitInput(843_731)).toBe("eight hundred and forty-three thousand seven hundred and thirty-one")
        expect(splitInput(940_504)).toBe("nine hundred and forty thousand five hundred and four")
        expect(splitInput(999_999)).toBe("nine hundred and ninety-nine thousand nine hundred and ninety-nine")
    })

    test('Under 1_000_000_000 - Billion', () => {
        expect(splitInput(1_000_000)).toBe("one million")
        expect(splitInput(4_000_001)).toBe("four million one")
        expect(splitInput(10_000_001)).toBe("ten million one")
        expect(splitInput(20_000_010)).toBe("twenty million ten")
        expect(splitInput(30_000_400)).toBe("thirty million four hundred")
        expect(splitInput(40_001_007)).toBe("forty million one thousand and seven")
        expect(splitInput(100_000_010)).toBe("hundred million ten")
        expect(splitInput(632_506_217)).toBe("six hundred and thirty-two million five hundred and six thousand two hundred and seventeen")
        expect(splitInput(707_900_000)).toBe("seven hundred and seven million nine hundred thousand")
        expect(splitInput(999_999_999)).toBe("nine hundred and ninety-nine million nine hundred and ninety-nine thousand nine hundred and ninety-nine")
    })

    test('Under 1_000_000_000_000 - Trillion', () => {
        expect(splitInput(1_000_000_001)).toBe("one billion and one")
        expect(splitInput(2_000_000_021)).toBe("two billion and twenty-one")
        expect(splitInput(8_030_106_678)).toBe("eight billion and thirty million one hundred and six thousand six hundred and seventy-eight")
        expect(splitInput(11_000_000_000)).toBe("eleven billion ")
        expect(splitInput(25_234_567_809)).toBe("twenty-five billion two hundred and thirty-four million five hundred and sixty-seven thousand eight hundred and nine")
        expect(splitInput(78_090_707_000)).toBe("seventy-eight billion ninety million seven hundred and seven thousand")
        expect(splitInput(101_000_000_001)).toBe("one hundred and one billion one")
        expect(splitInput(444_000_000_000)).toBe("four hundred and forty-four billion ")
        expect(splitInput(707_283_432_341)).toBe("seven hundred and seven billion two hundred and eighty-three million four hundred and thirty-two thousand three hundred and forty-one")
        expect(splitInput(999_999_999_999)).toBe("nine hundred and ninety-nine billion nine hundred and ninety-nine million nine hundred and ninety-nine thousand nine hundred and ninety-nine")
    })

    test('Under 1_000_000_000_000_000 - Quadrillion', () => {
        expect(splitInput(1_000_000_000_001)).toBe("one trillion one")
        expect(splitInput(2_304_040_000_000)).toBe("two trillion three hundred and four billion forty million ")
        expect(splitInput(9_009_000_000_900)).toBe("nine trillion nine billion nine hundred")
        expect(splitInput(20_000_000_002_000)).toBe("twenty trillion two thousand")
        expect(splitInput(44_050_201_758_120)).toBe("forty-four trillion fifty billion two hundred and one million seven hundred and fifty-eight thousand one hundred and twenty")
        expect(splitInput(87_238_000_101_667)).toBe("eighty-seven trillion two hundred and thirty-eight billion  million one hundred and one thousand six hundred and sixty-seven")
        expect(splitInput(110_000_000_000_000)).toBe("one hundred and ten trillion ")
        expect(splitInput(707_808_300_764_658)).toBe("seven hundred and seven trillion eight hundred and eight billion three hundred million seven hundred and sixty-four thousand six hundred and fifty-eight")
        expect(splitInput(890_803_040_004_900)).toBe("eight hundred and ninety trillion eight hundred and three billion forty million four thousand nine hundred")
        expect(splitInput(999_999_999_999_999)).toBe("nine hundred and ninety-nine trillion nine hundred and ninety-nine billion nine hundred and ninety-nine million nine hundred and ninety-nine thousand nine hundred and ninety-nine")
    })
})